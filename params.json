{"name":"Rando Peep","tagline":"Generate random fake data, in javascript, based on data files & functions","body":"# [Rando Peeps Data](http://konsumer.github.io/randopeep/)\r\n\r\nOriginally I made this for generating fake NPCs for RPGs & fake accounts for things online.\r\n\r\n![Peeps](http://thenewforty.areavoices.com/files/2012/04/marshmallow_peeps.jpg)\r\n\r\n[![NPM](https://nodei.co/npm/randopeep.png)](https://nodei.co/npm/randopeep/)\r\n[![Build Status](https://travis-ci.org/konsumer/randopeep.png?branch=master)](https://travis-ci.org/konsumer/randopeep)\r\n[![Demo](http://www.developmentwall.com/wp-content/uploads/2012/01/demo.png)](http://konsumer.github.io/randopeep/test/)\r\n\r\n## What random stuff can it generate?\r\n\r\nAll parameters are optional.\r\n\r\n`n` parameters is how many you would like, leave blank for 1.\r\n\r\n### People\r\n\r\n* `randopeep.name(params, n)` - a person's name, `params` are explained below\r\n* `randopeep.job(n)` - a job a person might do\r\n* `randopeep.invention(n)` - a seemingly awesome-sounding invention\r\n\r\n### Places\r\n\r\n* `randopeep.address.state(n)` - a US state\r\n* `randopeep.address.state.a(n)` - an abbreviated US state\r\n* `randopeep.address.zip(n)` - a zipcode\r\n* `randopeep.address.city(n)` - a pretend city\r\n* `randopeep.address.geo(n)` - a geolocation\r\n* `randopeep.address.streetName(n)` - a streetName\r\n* `randopeep.address.streetAddress(useFullAddress, n)` - a street address, set useFullAddress to get secondary address\r\n* `randopeep.address.phone(n)` - a phone number\r\n* `randopeep.address.uk.country(n)` - a country in the UK\r\n* `randopeep.address.uk.county(n)` - a county in the UK\r\n\r\n\r\n### Credit-card Numbers\r\n\r\n* `randopeep.cc(type, charCount, n)` - a credit-card, `type` is \"visa\", \"mastercard\", \"amex\", or \"discover\". `charCount` should be 13 or 16\r\n\r\n\r\n### Corporate Things\r\n\r\n* `randopeep.corporate.name(type, n)` - a corporate name, `type` is explained below\r\n* `randopeep.corporate.catchPhrase(n)` - `n` corporate catchphrases\r\n* `randopeep.corporate.bs(n)` - `n` lines of corporate BS\r\n\r\n\r\n### Internet Things\r\n\r\n* `randopeep.internet.ip(n)` - an IP address\r\n* `randopeep.internet.domain(derived, n)` - a internet domainname, `derived` is explained, below\r\n* `randopeep.internet.email(derived, n)` - an email address, `derived` is explained, below\r\n* `randopeep.internet.username(derived, n)` - an internet username, `derived` is explained, below\r\n\r\n\r\n### Random Text\r\n\r\n* `randopeep.ipsum(n, list)` - `n` words from ipsum `list`, default list is \"lorem\" and default count is 200\r\n\r\n\r\n### Other stuff\r\n\r\n* `randopeep.data` - the raw data, keyed by list name\r\n* `randopeep.get(list, n)` - `n` items from `list`\r\n\r\n\r\n### Parameters used above\r\n\r\n#### `params` for `randopeep.name`\r\n\r\nA lot of different types of names can be generated. All parameters are optional, here are the defaults:\r\n\r\n```javascript\r\n{\r\n\t'origin' : random - 'chinese', 'dark/elven', 'dwarven','elven', 'english', 'germanic','japanese','orcish','spanish','netrunner',\r\n\t'gender': random - 'male','female',\r\n\t'last': true,\r\n\t'justLast': false,\r\n\t'prefix': random - true, false,\r\n\t'returnData': false,\r\n}\r\n```\r\n\r\n* `origin` - the place/time the names come from (see data dir)\r\n* `gender` - male/female, if names are gendered\r\n* `last` - get a lastname?\r\n* `justLast` - get lastname only?\r\n* `prefix` - look up gendered prefix, if applicable\r\n* `returnData` - return options (as generated) with `name` field, good if you want random gender/origin, but want to know about it after\r\n\r\nIf you set any of them to an array, it will pick a random element.\r\n\r\n\r\n#### `type` for `randopeep.corporate.name`\r\n\r\nIt can be one of these:\r\n\r\n* cyber -  a company from the future\r\n* firm - a law-firm, all last names are random non-fantasy, but from the same origin\r\n* small - a small company\r\n* large - a large corp\r\n\r\n\r\n#### `derived` for `randopeep.internet.*`\r\n\r\nWill attempt to use the text that you give it as a base for generating other things.  Makes more-legit looking email, if you already know the name, for example.\r\n\r\n\r\n## Usage\r\n\r\nSee unit-tests in [test/test.js](https://github.com/konsumer/randopeep/blob/master/test/test.js) if you need more details.\r\n\r\n### Node\r\n\r\nInstall: `npm install randopeep`\r\n\r\nin your code:\r\n\r\n```javascript\r\nvar randopeep = require('randopeep');\r\nvar myFakeName = randopeep.name();\r\n```\r\n\r\n### Browser\r\n\r\nJust include `build/randopeep.min.js` in your thing, and use it like normal:\r\n\r\n```html\r\n<script src=\"http://konsumer.github.io/randopeep/randopeep.min.js\"></script>\r\n<script>\r\n\tdocument.body.innerHTML = \"I'm cool dude named \" + randopeep.name({gender:'male'});\r\n</script>\r\n```\r\n\r\nThere is also support for AMD/require.js, just put out/randopeep.js in your application dir, and do this:\r\n\r\n```javascript\r\ndefine(['randopeep'], function(peep){\r\n\tdocument.body.innerHTML = \"I'm cool lady named \" + randopeep.name({gender:'female'});\r\n});\r\n```\r\n\r\n### Lite-version\r\n\r\nIf you want to load your data dynamically, instead of inline, build with `grunt lite-browser` or `grunt lite-node`. For `grunt lite-browser`, make sure `dataLocation` in Gruntfile.js is set to a URL where your data can be found.\r\n\r\n### Adding your own name-libraries\r\n\r\nYou can add your own, if you install dev-tools with `npm install` then add whatever you want to [data-src/wordlists](https://github.com/konsumer/randopeep/tree/master/data-src/wordlists) dir, and run `grunt`.\r\n\r\nFormat is 1 item per line.\r\n\r\n### Using name-libraries\r\n\r\nLet's pretend some of the built-in wordlist librarues don't have the `randopeep.name()` convenience function, and load the libraries, directly:\r\n\r\n```javascript\r\nvar myLeetName = randopeep.get('name/english/female/first') + ' ' + randopeep.get('name/netrunner/first');\r\n```\r\n\r\n\r\n## Testing\r\n\r\nYou can run my CLI tests with `npm test` or open test/index.html to run same tests, in-browser.\r\n\r\n\r\n## TODO\r\n\r\n* use the GURPS class-data\r\n* ipsum could be smarter with English, so it can assemble seemingly sensical text.\r\n\r\n\r\n## Credits\r\n\r\n* see [data credits](https://github.com/konsumer/randopeep/tree/master/data-src) for info about where a lot of this stuff came from.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}